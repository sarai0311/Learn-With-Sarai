import { google } from 'googleapis';\n\n// Environment variables\nconst SERVICE_ACCOUNT_EMAIL = process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL;\nconst PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY;\nconst PRIMARY_CALENDAR_ID = process.env.GOOGLE_CALENDAR_ID || 'sarai.syav@gmail.com';\n\n// Simple time slots\nconst TIME_SLOTS = ['13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00', '21:00', '22:00'];\n\n// Create Google Calendar client\nconst createCalendarClient = async () => {\n  try {\n    if (!SERVICE_ACCOUNT_EMAIL || !PRIVATE_KEY) {\n      console.error('Google Calendar credentials not configured');\n      return null;\n    }\n\n    const credentials = {\n      type: 'service_account',\n      client_email: SERVICE_ACCOUNT_EMAIL,\n      private_key: PRIVATE_KEY.replace(/\\\\n/g, '\\n'),\n    };\n\n    const auth = new google.auth.GoogleAuth({\n      credentials,\n      scopes: ['https://www.googleapis.com/auth/calendar']\n    });\n    \n    const authClient = await auth.getClient();\n    return google.calendar({ version: 'v3', auth: authClient });\n  } catch (error) {\n    console.error('Error creating Google Calendar client:', error);\n    return null;\n  }\n};\n\nexport default async function handler(req, res) {\n  // Set CORS headers\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n\n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  try {\n    console.log('🚀 Starting simple availability check');\n    \n    // Get basic calendar info to test connection\n    const calendar = await createCalendarClient();\n    if (!calendar) {\n      return res.status(500).json({ error: 'Failed to create calendar client' });\n    }\n\n    console.log('✅ Calendar client created successfully');\n    \n    // Test basic calendar access\n    const calendarInfo = await calendar.calendars.get({ calendarId: PRIMARY_CALENDAR_ID });\n    console.log('📅 Calendar info:', calendarInfo.data?.summary);\n    \n    // Try to fetch events for next 7 days\n    const now = new Date();\n    const futureDate = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);\n    \n    console.log('🔍 Fetching events from', now.toISOString(), 'to', futureDate.toISOString());\n    \n    const events = await calendar.events.list({\n      calendarId: PRIMARY_CALENDAR_ID,\n      timeMin: now.toISOString(),\n      timeMax: futureDate.toISOString(),\n      singleEvents: true,\n      orderBy: 'startTime'\n    });\n    \n    console.log('📋 Found', events.data.items?.length || 0, 'events');\n    \n    // Return simplified response\n    const availability = {\n      status: 'success',\n      calendarInfo: {\n        id: PRIMARY_CALENDAR_ID,\n        summary: calendarInfo.data?.summary || 'Unknown',\n        timezone: calendarInfo.data?.timeZone || 'Atlantic/Canary'\n      },\n      eventsFound: events.data.items?.length || 0,\n      events: events.data.items?.map(event => ({\n        id: event.id,\n        summary: event.summary,\n        start: event.start?.dateTime || event.start?.date,\n        end: event.end?.dateTime || event.end?.date\n      })) || [],\n      timeSlots: TIME_SLOTS,\n      message: 'Simple availability check successful'\n    };\n    \n    res.json(availability);\n    \n  } catch (error) {\n    console.error('❌ Error in simple availability:', error);\n    res.status(500).json({ \n      error: 'Internal server error',\n      message: error.message,\n      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\n    });\n  }\n}\n