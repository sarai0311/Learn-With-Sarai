import { google } from 'googleapis';\n\nexport default async function handler(req, res) {\n  // Set CORS headers\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n\n  if (req.method !== 'GET') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  const SERVICE_ACCOUNT_EMAIL = process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL;\n  const PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY;\n  const PRIMARY_CALENDAR_ID = process.env.GOOGLE_CALENDAR_ID || 'sarai.syav@gmail.com';\n\n  try {\n    if (!SERVICE_ACCOUNT_EMAIL || !PRIVATE_KEY) {\n      throw new Error('Missing required environment variables');\n    }\n\n    const credentials = {\n      type: 'service_account',\n      client_email: SERVICE_ACCOUNT_EMAIL,\n      private_key: PRIVATE_KEY.replace(/\\\\n/g, '\\n'),\n    };\n\n    const auth = new google.auth.GoogleAuth({\n      credentials,\n      scopes: ['https://www.googleapis.com/auth/calendar']\n    });\n    \n    const authClient = await auth.getClient();\n    const calendar = google.calendar({ version: 'v3', auth: authClient });\n    \n    // Get calendar info\n    const calendarInfo = await calendar.calendars.get({\n      calendarId: PRIMARY_CALENDAR_ID\n    });\n    \n    // Fetch events for next 14 days\n    const now = new Date();\n    const futureDate = new Date(now.getTime() + 14 * 24 * 60 * 60 * 1000);\n    \n    console.log('üîç Fetching events from', now.toISOString(), 'to', futureDate.toISOString());\n    \n    const events = await calendar.events.list({\n      calendarId: PRIMARY_CALENDAR_ID,\n      timeMin: now.toISOString(),\n      timeMax: futureDate.toISOString(),\n      singleEvents: true,\n      orderBy: 'startTime'\n    });\n    \n    console.log('üìã Found', events.data.items?.length || 0, 'events');\n    \n    // Format the response\n    const response = {\n      status: 'success',\n      calendar: {\n        id: calendarInfo.data.id,\n        summary: calendarInfo.data.summary,\n        timeZone: calendarInfo.data.timeZone\n      },\n      eventCount: events.data.items?.length || 0,\n      upcomingEvents: events.data.items?.map(event => {\n        const startTime = event.start?.dateTime || event.start?.date;\n        const endTime = event.end?.dateTime || event.end?.date;\n        \n        return {\n          id: event.id,\n          summary: event.summary || 'No title',\n          description: event.description || 'No description',\n          start: startTime,\n          end: endTime,\n          status: event.status,\n          // Convert to readable format\n          startLocal: startTime ? new Date(startTime).toLocaleString('en-US', {\n            timeZone: calendarInfo.data.timeZone || 'Atlantic/Canary',\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit'\n          }) : 'All day',\n          endLocal: endTime ? new Date(endTime).toLocaleString('en-US', {\n            timeZone: calendarInfo.data.timeZone || 'Atlantic/Canary',\n            hour: '2-digit',\n            minute: '2-digit'\n          }) : 'All day'\n        };\n      }) || [],\n      timestamp: new Date().toISOString()\n    };\n\n    res.json(response);\n\n  } catch (error) {\n    console.error('‚ùå Error fetching calendar events:', error);\n    res.status(500).json({ \n      status: 'error',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n}